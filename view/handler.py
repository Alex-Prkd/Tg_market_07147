import os

from aiogram import Bot, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from db import Session
from db.commands.costumer import add_user
from keyboards import *

print(os.getenv("TOKEN"))
bot = Bot(token=os.getenv("TOKEN"), parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())




seller_list = {}

"""–î–æ–±–∞–≤–∏—Ç—å –≤ –±–¥ –ø—Ä–æ—Ñ–∏–ª—å"""


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å/–ø—Ä–æ–¥–∞–≤–µ—Ü
@dp.message_handler(CommandStart())
async def command_start_menu(message: Message):
    async with Session() as session:
        await add_user(session, message.from_user)
    photo = open("image/haze_title.jpg", "rb")
    started_key = KeyboardStart()
    await message.answer_photo(photo,
                               reply_markup=started_key.keyboards
                               )


# __________________________________________–ü–æ–∫—É–ø–∞—Ç–µ–ª—å____________________________________________________________
@dp.callback_query_handler(lambda callback: callback.data in "instructions")
async def get_instruction(callback_query: CallbackQuery):
    information = InformationCostumer()
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           text="–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å",
                           reply_markup=information.keyboards
                           )



@dp.callback_query_handler(lambda callback: callback.data in ["about_costumer", "instruction_costumer",
                                                              "regulations_costumer"])
async def costumer_menu(callback_query: CallbackQuery):
        # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–¥
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           text=f"–í—ã–±—Ä–∞–ª–∏: {callback_query.data}"
                           )


@dp.callback_query_handler(lambda callback: callback.data in "region")
async def select_region(callback_query: CallbackQuery):
    regions = LocationSeller()
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           text="–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä",
                           reply_markup=regions.location)


# –í—ã–±–æ—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞
@dp.callback_query_handler(lambda callback: callback.data in ["sovetskiy", "partizanskiy",
                                                              "moscovskiy", "pervomaiskiy",
                                                              "oktyabrskiy", "tsentralnyy",
                                                              "never_mind"])
async def choice_product(callback_query: CallbackQuery):
    # –ú–µ–Ω—é —Å–æ –≤—Å–µ–º–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏
    if callback_query.data == "never_mind":
        print("never_mind")
        products_kb = ChoiceProduct()
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id,
                               text="–ü—Ä–æ–¥—É–∫—Ü–∏—è",
                               reply_markup=products_kb.products)
    else:
        # –í—ã–±–æ—Ä –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∏–∑ –±–¥ –ø–æ –≥–µ–æ–ª–∞–∫–∞—Ü–∏–∏
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id,
                               text=callback_query.data
                               )


# –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
# –ó–¥–µ—Å—å –µ—â—ë –ø–æ–¥–∫–∏–Ω—É—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é (–ë–õ–Ø–Ø–Ø–¢–¨)
@dp.callback_query_handler(lambda callback: callback.data in "shops")
async def get_shops(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           text=callback_query.data
                           )


# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@dp.callback_query_handler(lambda callback: callback.data in ["aqua", "details", "vape", "brand",
                                                              "limit_vape", "nicotine"])
async def products_result_request(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text=f"–í—ã–±—Ä–∞–ª–∏ {callback_query.data}")


@dp.callback_query_handler(lambda callback: callback.data in "help")
async def get_help(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           text=f"–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º: @alex_prkd",
                           )


# _____________________________________________________–ü—Ä–æ–¥–∞–≤–µ—Ü___________________________________________________

@dp.callback_query_handler(lambda callback: callback.data in "register_market")
async def seller_info(callback_query: CallbackQuery):
    print()
    print(callback_query.data)
    information = InformationSeller()
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           text="–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å",
                           reply_markup=information.keyboards)


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
@dp.callback_query_handler(lambda callback: callback.data in ["about_seller", "instruction_seller",
                                                              "regulations_seller", "contact_with_admin"
                                                              ])
async def seller_menu(callback_query: CallbackQuery):
    print()
    print(callback_query.data)
    # –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω
    if callback_query.data == "contact_with_admin":
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id,
                               text=f"–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º: @alex_prkd",
                               )
    else:
        # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –±–¥
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id,
                               text=f"–í—ã–±—Ä–∞–ª–∏: {callback_query.data}\n"
                                    f"–ü–æ–∏—Å–∫ –≤ –±–¥ –ø–æ –∑–∞–ø—Ä–æ—Å—É"
                               )


@dp.callback_query_handler(lambda callback: callback.data in "my_shop")
async def get_my_shop(callback_query: CallbackQuery):
    print()
    print(callback_query.data)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           text="–£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                           )


# –í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–≥–∞–∑–∏–Ω–∞
# –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—É—Ç—É—Ä—É –¥–ª—è —ç—Ç–æ–≥–æ —Ö–µ–Ω–¥—Ä–µ—Ä–∞!!! –ü–û–ñ–ê–õ–£–ô–°–¢–ê!
@dp.message_handler(lambda msg: msg.text in ["üåÑ –§–æ—Ç–æ", "üî† –ù–∞–∑–≤–∞–Ω–∏–µ", "‚Ñπ –û–ø–∏—Å–∞–Ω–∏–µ",
                                             "‚ö† –¢–æ–≤–∞—Ä", "üåé –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", "‚¨Ö –ù–∞–∑–∞–¥",
                                             "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"])
async def settings_market(message: Message):
    print()
    print(message)
    if message.text == "‚¨Ö –ù–∞–∑–∞–¥":
        await command_start_menu(message)
    else:
        if message.text == "üåÑ –§–æ—Ç–æ":
            await message.answer("–ò–∑–º–µ–Ω–∏—à—å —Ñ–æ—Ç–æ")
        elif message.text == "üî† –ù–∞–∑–≤–∞–Ω–∏–µ":
            await message.answer(text="–ü–æ–º–µ–Ω—è–µ—à—å –Ω–∞–∑–≤–∞–Ω–∏–µ")
        elif message.text == "‚Ñπ –û–ø–∏—Å–∞–Ω–∏–µ":
            await message.answer(text="–î–æ–±–∞–≤–∏—à—å –æ–ø–∏—Å–∞–Ω–∏–µ")
        elif message.text == "‚ö† –¢–æ–≤–∞—Ä":
            await message.answer(text="–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        elif message.text == "üåé –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ":
            await message.answer(text="–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
        elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞":
            await message.answer(message.text)
        elif message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞":
            await message.answer(message.text)

        # –î–æ–ø–∏—Å–∞—Ç—å —Ö—ç–Ω–¥–ª–µ—Ä—ã –Ω–∞ –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞


# __________________________________–ê–¥–º–∏–Ω__________________________________________________________
@dp.message_handler(commands="admin")
async def entry(message: Message):
    print()
    print(message)
    if message.from_user.id == ADMIN_ID:
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        await PasswordAdmin.password.set()
    else:
        await message.answer(text="–ù–µ—Ç –ø—Ä–∞–≤")


@dp.message_handler(state=PasswordAdmin.password)
async def validate_password(message: Message, state=FSMContext) -> None:
    await bot.delete_message(message.from_user.id, message.message_id)
    await state.update_data(password=message.text)
    password_user = await state.get_data()
    if password_user.get("password") == PASSWORD_ADMIN:
        await message.answer(text="–í–æ—à–ª–∏",
                             reply_markup=AdminMenu.menu)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    await state.finish()


# –ü–æ–º–µ–Ω—è—Ç—å == ADMIN_ID –Ω–∞ !=ADMIN_ID?
@dp.message_handler(lambda msg: msg.text in ["–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤", "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π", "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                                              "–ß–°", "–í—ã–π—Ç–∏", "–ù–∞–∑–∞–¥", "–î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", "–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é"])
async def output_menu_admin(message: Message):
    if message.from_user.id == ADMIN_ID:
        if message.text == "–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤":
            await message.answer(text="–ò–∑ –±–¥ –≤—ã–Ω–∏–º–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤")
        elif message.text == "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π":
            await message.answer(text="–ò–∑ –±–¥ –≤—ã–Ω–∏–º–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π")
        elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é":
            role_selection = SelectRole
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
                                 reply_markup=role_selection.costumer_or_seller
                                 )
        elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é":
            await message.answer("–î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é")
        elif message.text == "–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∞–∏—é":
            await message.answer("–†–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å –∫–∞—Å–∫–¥–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º")
        elif message.text == "–í—ã–π—Ç–∏":
            await command_start_menu(message)
        elif message.text == "–ù–∞–∑–∞–¥":
            await message.answer(text="–í–æ—à–ª–∏", reply_markup=AdminMenu.menu)
    else:
        await message.answer(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")


@dp.message_handler(lambda msg: msg.text in ["–û –ø—Ä–æ–¥–∞–≤—Ü–µ", "–û –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ", "–ù–∞–∑–∞–¥"])
async def edit_info(message: Message):
    if message.from_user.id == ADMIN_ID:
        if message.text == "–ù–∞–∑–∞–¥":
            await output_menu_admin(message)
        else:
            new_info = EditInfo(message.text)
            await message.answer(text="—Å–ø–∏—Å–æ–∫ –∏–Ω—Ñ—ã –æ –±–æ—Ç–µ", reply_markup=new_info.keyboards)



# –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–Ω–æ–ø–∫–∞ "–ø–æ—á–µ–º—É –º—ã"?? callback.data is "edit_about_costumer"
@dp.callback_query_handler(lambda callback: callback.data in ["edit_regulations_seller", "edit_instruction_seller",
                                                              "edit_regulations_costumer", "edit_instruction_costumer",
                                                              "edit_about_costumer", "about_seller", "about_costumer"])
async def edit_info_seller(callback: CallbackQuery):
    if callback.from_user.id == ADMIN_ID:
        await bot.answer_callback_query(callback.id)
        await bot.send_message(chat_id=callback.from_user.id, text=callback.data)
